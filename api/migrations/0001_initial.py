# Generated by Django 5.1.7 on 2025-03-26 13:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Enseignant',
            fields=[
                ('id_enseignant', models.AutoField(db_column='id_enseignant', db_comment="Identifiant unique auto-généré de l'enseignant", primary_key=True, serialize=False)),
                ('titre', models.CharField(choices=[('Pr.', 'Professeur'), ('Dr.', 'Docteur'), ('Mr.', 'Monsieur'), ('Mme', 'Madame')], db_comment="Titre académique de l'enseignant", default='Dr.', max_length=5)),
                ('specialite', models.CharField(db_comment="Domaine d'expertise principal (ex: Mathématiques Appliquées)", help_text='Spécifiez la discipline principale', max_length=100)),
            ],
            options={
                'verbose_name': 'Enseignant',
                'verbose_name_plural': 'Enseignants',
                'db_table': 'enseignants',
                'db_table_comment': 'Regroupe les informations professionnelles des enseignants',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id_role', models.AutoField(db_column='id_role', db_comment='Identifiant unique auto-incrémenté du rôle', primary_key=True, serialize=False)),
                ('nom_role', models.CharField(db_column='nom_role', db_comment='Libellé du rôle (ex: Administrateur, Enseignant)', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Rôle',
                'verbose_name_plural': 'Rôles',
                'db_table': 'roles',
                'ordering': ['nom_role'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Classe',
            fields=[
                ('id_classe', models.AutoField(db_column='id_classe', db_comment='Identifiant unique de la classe', primary_key=True, serialize=False)),
                ('code_classe', models.CharField(db_column='code_classe', db_comment='Code unique de la classe (ex: M1MAGA)', max_length=15, unique=True)),
                ('filiere', models.CharField(choices=[('MAGA', 'Master Analyse Géométrie Algébrique'), ('TDSI', 'Transmission de Données et Sécurité Informatique'), ('MS2E', 'Master Sécurité des Systèmes Embarqués')], db_comment='Domaine de spécialisation de la formation', max_length=4)),
                ('niveau', models.CharField(choices=[('L', 'Licence'), ('M', 'Master')], db_comment='Niveau académique (L=Licence, M=Master)', max_length=1)),
                ('option', models.CharField(choices=[('PROFESSIONNEL', 'Professionnel'), ('RECHERCHE', 'Recherche')], db_comment='Option de spécialisation de la formation', max_length=20)),
                ('annee', models.PositiveSmallIntegerField(db_comment='Année dans le cycle (1 à 5)')),
            ],
            options={
                'verbose_name': 'Parcours académique',
                'verbose_name_plural': 'Parcours académiques',
                'db_table': 'classes',
                'constraints': [models.UniqueConstraint(fields=('filiere', 'niveau', 'option', 'annee'), name='unique_parcours')],
            },
        ),
        migrations.CreateModel(
            name='SessionExamen',
            fields=[
                ('id_session', models.AutoField(db_column='id_session', db_comment='Identifiant unique de la session', primary_key=True, serialize=False)),
                ('code_session', models.CharField(db_column='code_session', db_comment='Code généré', max_length=15, unique=True)),
                ('type_session', models.CharField(choices=[('N', 'Session normale'), ('R', 'Session de rattrapage')], db_column='type_session', db_comment="Type de session d'examen", max_length=1)),
                ('date_debut', models.DateField(db_column='date_debut', db_comment="Date d'ouverture de la session")),
                ('date_fin', models.DateField(db_column='date_fin', db_comment='Date de clôture de la session')),
                ('annee_universitaire', models.CharField(db_column='annee_universitaire', db_comment='Année universitaire', max_length=9, validators=[django.core.validators.RegexValidator('^\\d{4}-\\d{4}$')])),
            ],
            options={
                'verbose_name': "Session d'examen",
                'verbose_name_plural': "Sessions d'examen",
                'db_table': 'sessions_examen',
                'ordering': ['-annee_universitaire', 'type_session'],
                'indexes': [models.Index(fields=['date_debut', 'date_fin'], name='sessions_ex_date_de_d8c9f9_idx'), models.Index(fields=['type_session'], name='sessions_ex_type_se_b5f673_idx')],
            },
        ),
        migrations.CreateModel(
            name='UE',
            fields=[
                ('id_ue', models.AutoField(db_column='id_ue', db_comment="Identifiant unique de l'unité d'enseignement", primary_key=True, serialize=False)),
                ('code_ue', models.CharField(db_column='code_ue', db_comment="Code officiel de l'UE", max_length=20, unique=True)),
                ('intitule', models.CharField(db_column='intitule_ue', db_comment="Intitulé complet de l'unité d'enseignement", max_length=200)),
                ('credits_ects', models.PositiveSmallIntegerField(db_column='credits_ects', db_comment='Nombre de crédits ECTS', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('semestre', models.PositiveIntegerField(choices=[(1, 'Semestre 1'), (2, 'Semestre 2')], db_column='semestre', db_comment="Semestre d'enseignement")),
            ],
            options={
                'verbose_name': "Unité d'Enseignement",
                'verbose_name_plural': "Unités d'Enseignement",
                'db_table': 'unites_enseignement',
                'ordering': ['code_ue'],
                'indexes': [models.Index(fields=['semestre'], name='unites_ense_semestr_5a1a8d_idx'), models.Index(fields=['code_ue', 'semestre'], name='unites_ense_code_ue_410cbe_idx')],
            },
        ),
        migrations.CreateModel(
            name='EC',
            fields=[
                ('id_ec', models.AutoField(db_column='id_ec', db_comment="Identifiant unique de l'élément constitutif", primary_key=True, serialize=False)),
                ('code_ec', models.CharField(db_column='code_ec', db_comment="Code officiel de l'EC", max_length=20, unique=True)),
                ('intitule_ec', models.CharField(db_column='intitule_ec', db_comment="Intitulé complet de l'élément constitutif", max_length=150)),
                ('coefficient', models.FloatField(db_column='coefficient', db_comment="Coefficient dans l'UE", validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('responsable', models.ForeignKey(db_column='id_responsable', db_comment="Enseignant responsable de l'UE", on_delete=django.db.models.deletion.PROTECT, related_name='ecs_encadrees', to='api.enseignant')),
                ('ue', models.ForeignKey(db_column='id_ue', db_comment="Unité d'enseignement parente", on_delete=django.db.models.deletion.CASCADE, related_name='elements_constitutifs', to='api.ue')),
            ],
            options={
                'verbose_name': 'Élément Constitutif',
                'verbose_name_plural': 'Éléments Constitutifs',
                'db_table': 'elements_constitutifs',
                'ordering': ['ue__code_ue', 'code_ec'],
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id_utilisateur', models.AutoField(db_column='id_utilisateur', db_comment="Identifiant unique de l'utilisateur", primary_key=True, serialize=False)),
                ('sexe', models.CharField(blank=True, choices=[('H', 'Homme'), ('F', 'Femme')], db_comment="Genre de l'utilisateur (H=Homme, F=Femme)", max_length=1, null=True)),
                ('email_verified', models.BooleanField(db_column='email_verified', db_comment="Statut de vérification de l'adresse email", default=False)),
                ('telephone', models.CharField(blank=True, db_column='telephone', db_comment='Numéro de téléphone au format international', max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\+?[0-9]{8,15}$')])),
                ('date_naissance', models.DateField(blank=True, db_column='date_naissance', db_comment='Date de naissance au format AAAA-MM-JJ', null=True)),
                ('photo_profil', models.ImageField(blank=True, db_column='photo_profil', db_comment='Chemin relatif de la photo de profil', max_length=255, null=True, upload_to='profils/photo/%Y/%m/%d/')),
                ('address_profil', models.TextField(blank=True, db_column='address_profil', db_comment='Adresse postale complète', help_text='Rue, code postal, ville, pays', null=True)),
                ('newsletter_abonne', models.BooleanField(db_column='newsletter_abonne', db_comment='Abonnement aux communications', default=False)),
                ('blog_posts', models.BooleanField(db_column='blog_posts', db_comment='Abonnement aux communications', default=False)),
                ('groups', models.ManyToManyField(blank=True, db_comment="Groupes d'utilisateurs pour les permissions", related_name='utilisateurs', to='auth.group', verbose_name='groupes')),
                ('user_permissions', models.ManyToManyField(blank=True, db_comment="Permissions spécifiques à l'utilisateur", related_name='utilisateurs', to='auth.permission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'utilisateurs',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Etudiant',
            fields=[
                ('id_etudiant', models.AutoField(db_column='id_etudiant', db_comment="Identifiant unique auto-incrémenté de l'étudiant", primary_key=True, serialize=False)),
                ('matricule', models.CharField(db_comment='Matricule académique unique (8 caractères alphanum)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9]{8}$')])),
                ('utilisateur', models.OneToOneField(blank=True, db_column='id_utilisateur', db_comment='Référence au compte utilisateur associé', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profil_etudiant', to='api.utilisateur')),
            ],
            options={
                'verbose_name': 'Profil étudiant',
                'verbose_name_plural': 'Profils étudiants',
                'db_table': 'etudiants',
                'db_table_comment': 'Les informations spécifiques aux étudiants',
            },
        ),
        migrations.AddField(
            model_name='enseignant',
            name='utilisateur',
            field=models.OneToOneField(db_column='id_utilisateur', db_comment='Liaison avec le compte utilisateur principal', on_delete=django.db.models.deletion.CASCADE, related_name='profil_enseignant', to='api.utilisateur'),
        ),
        migrations.CreateModel(
            name='UtilisateurRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.ForeignKey(db_column='id_role', db_comment='Clé étrangère vers la table roles', on_delete=django.db.models.deletion.PROTECT, to='api.role')),
                ('utilisateur', models.ForeignKey(db_column='id_utilisateur', db_comment='Clé étrangère vers la table utilisateurs', on_delete=django.db.models.deletion.PROTECT, to='api.utilisateur')),
            ],
            options={
                'verbose_name': 'Affectation rôle',
                'verbose_name_plural': 'Affectations des rôles',
                'db_table': 'utilisateur_roles',
                'db_table_comment': 'Table de liaison entre utilisateurs et rôles',
            },
        ),
        migrations.AddField(
            model_name='utilisateur',
            name='roles',
            field=models.ManyToManyField(db_comment='Relation ManyToMany avec les rôles via la table de liaison', related_name='utilisateurs', through='api.UtilisateurRole', to='api.role'),
        ),
        migrations.CreateModel(
            name='Inscription',
            fields=[
                ('id_inscription', models.AutoField(db_column='id_inscription', db_comment="Identifiant unique de l'inscription", primary_key=True, serialize=False)),
                ('date_inscription', models.DateTimeField(auto_now_add=True, db_column='date_inscription', db_comment="Date de la création de l'inscription")),
                ('annee_academique', models.CharField(db_column='annee_academique', db_comment="Année académique au format 'AAAA-AAAA'", max_length=9, validators=[django.core.validators.RegexValidator('^\\d{4}-\\d{4}$')])),
                ('classe', models.ForeignKey(db_column='id_classe', db_comment='Référence à la classe concernée', on_delete=django.db.models.deletion.PROTECT, related_name='inscrits', to='api.classe')),
                ('etudiant', models.ForeignKey(db_column='id_etudiant', db_comment="Référence à l'étudiant inscrit", on_delete=django.db.models.deletion.PROTECT, related_name='inscriptions', to='api.etudiant')),
            ],
            options={
                'verbose_name': 'Inscription académique',
                'verbose_name_plural': 'Inscriptions académiques',
                'db_table': 'inscriptions',
                'db_table_comment': 'Gestion des inscriptions annuelles aux classes',
                'indexes': [models.Index(fields=['annee_academique'], name='inscription_annee_a_792485_idx'), models.Index(fields=['date_inscription'], name='inscription_date_in_1ce947_idx')],
                'unique_together': {('etudiant', 'classe', 'annee_academique')},
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id_note', models.AutoField(db_column='id_note', db_comment='Identifiant unique de la note', primary_key=True, serialize=False)),
                ('valeur', models.FloatField(db_column='valeur_note', db_comment='Note finale sur 20', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(20.0)])),
                ('date_validation', models.DateTimeField(auto_now_add=True, db_column='date_validation', db_comment="Date de l'enregistrement")),
                ('ec', models.ForeignKey(db_column='id_ec', db_comment='Élément constitutif', on_delete=django.db.models.deletion.PROTECT, related_name='notes', to='api.ec')),
                ('etudiant', models.ForeignKey(db_column='id_etudiant', db_comment='Étudiant concerné', on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='api.etudiant')),
                ('session', models.ForeignKey(db_column='id_session', db_comment="Session d'examen", on_delete=django.db.models.deletion.PROTECT, related_name='notes', to='api.sessionexamen')),
            ],
            options={
                'verbose_name': 'Note académique',
                'verbose_name_plural': 'Notes académiques',
                'db_table': 'notes',
                'indexes': [models.Index(fields=['valeur'], name='notes_valeur__29c71e_idx'), models.Index(fields=['date_validation'], name='notes_date_va_e9a829_idx')],
                'unique_together': {('etudiant', 'ec', 'session')},
            },
        ),
        migrations.AddConstraint(
            model_name='ec',
            constraint=models.UniqueConstraint(fields=('ue', 'code_ec'), name='unique_ec_in_ue'),
        ),
        migrations.AddIndex(
            model_name='etudiant',
            index=models.Index(fields=['matricule'], name='idx_matricule'),
        ),
        migrations.AddIndex(
            model_name='etudiant',
            index=models.Index(fields=['utilisateur'], name='idx_etudiant_user'),
        ),
        migrations.AddIndex(
            model_name='enseignant',
            index=models.Index(fields=['specialite'], name='idx_specialite'),
        ),
        migrations.AddIndex(
            model_name='enseignant',
            index=models.Index(fields=['titre'], name='idx_titre'),
        ),
        migrations.AlterUniqueTogether(
            name='utilisateurrole',
            unique_together={('utilisateur', 'role')},
        ),
        migrations.AddIndex(
            model_name='utilisateur',
            index=models.Index(fields=['last_name', 'first_name'], name='utilisateur_last_na_aea844_idx'),
        ),
        migrations.AddIndex(
            model_name='utilisateur',
            index=models.Index(fields=['date_joined'], name='utilisateur_date_jo_ff8afc_idx'),
        ),
    ]
